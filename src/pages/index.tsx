import React, { ChangeEvent, useEffect, useState } from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { io, Socket } from 'socket.io-client';
import {
  MenuItem,
  Paper,
  Select,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from '@material-ui/core';
import { Product } from 'coinbase-pro-node';

type L2Snapshot = {
  type: 'snapshot';
  product_id: string;
  bids: string[][];
  asks: string[][];
};

type L2Update = {
  type: 'l2update';
  product_id: string;
  time: string;
  changes: ['buy' | 'sell', string, string][];
};

const Home: NextPage = () => {
  const [socket, setSocket] = useState<Socket | undefined>(undefined);
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedProduct, setSelectedProduct] = useState<Product | undefined>(undefined);
  const [bids, setBids] = useState<string[][]>([]);
  const [asks, setAsks] = useState<string[][]>([]);

  useEffect(() => {
    fetch('/api/products')
      .then((res) => res.json() as Promise<Product[]>)
      .then((products) => {
        setProducts(products);
        setSelectedProduct(products.find((product) => product.id === 'BTC-USD'));
        setSocket(
          io('http://localhost:3000', {
            path: '/api/orderbook',
          }),
        );
      });
  }, []);

  useEffect(() => {
    if (!socket) return;

    socket.on('connect', () => {
      console.log('socket id', socket.id);
    });

    socket.on('l2update', (data: L2Update) => {
      console.log(data);
      data.changes.forEach((change) => {
        switch (change[0]) {
          case 'buy':
            setBids([...bids.slice(0, 9).filter((bid) => +bid[1] > 0), [change[1], change[2]]]);
            break;
          case 'sell':
            setAsks([...asks.slice(0, 9).filter((ask) => +ask[1] > 0), [change[1], change[2]]]);
            break;
        }
      });
    });
  }, [socket, bids, asks]);

  useEffect(() => {
    if (!socket) return;
    socket.emit('change product', selectedProduct?.id);
    setBids([]);
    setAsks([]);
  }, [selectedProduct, socket]);

  const handleProductSelection = (event: ChangeEvent<{ value: unknown }>) => {
    setSelectedProduct(products.find((product) => product.id === (event.target.value as string)));
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {!selectedProduct ? (
          <p>'Loading Products'</p>
        ) : (
          <>
            <p>
              <Select value={selectedProduct?.id} onChange={handleProductSelection}>
                {products.map((product) => (
                  <MenuItem value={product.id} key={product.id}>
                    {product.id}
                  </MenuItem>
                ))}
              </Select>
            </p>
            <h2>Bids</h2>
            <TableContainer component={Paper}>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Size</TableCell>
                    <TableCell>Price({selectedProduct?.quote_currency})</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {bids?.map((bid) => (
                    <TableRow key={bid[0]}>
                      <TableCell>{bid[1]}</TableCell>
                      <TableCell>{bid[0]}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
            <h2>Asks</h2>
            <TableContainer component={Paper}>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Size</TableCell>
                    <TableCell>Price({selectedProduct?.quote_currency})</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {asks?.map((ask) => (
                    <TableRow key={ask[0]}>
                      <TableCell>{ask[1]}</TableCell>
                      <TableCell>{ask[0]}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </>
        )}
      </main>
    </div>
  );
};
export default Home;
